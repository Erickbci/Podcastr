{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/erick/fsociety00.dat/nlw5/Podcastr/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport Episode from '../pages/episodes/[slug]';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var newRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(newRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      toggleShuffle: toggleShuffle,\n      toggleLoop: toggleLoop,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState,\n      playList: playList,\n      playNext: playNext,\n      hasNext: hasNext,\n      playPrevious: playPrevious,\n      hasPrevious: hasPrevious,\n      clearPlayerState: clearPlayerState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/erick/fsociety00.dat/nlw5/Podcastr/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","Episode","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","clearPlayerState","hasPrevious","hasNext","length","playNext","newRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react'\nimport Episode from '../pages/episodes/[slug]'\n\ntype Episode = {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n}\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  togglePlay: () => void;\n  setPlayingState: (state: boolean) => void;\n  hasPrevious: boolean;\n  hasNext: boolean;\n  isLooping: boolean;\n  toggleLoop: () => void;\n  isShuffling: boolean;\n  toggleShuffle: () => void;\n  clearPlayerState: () => void;\n}\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData)\n\nexport function PlayerContextProvider( { children } : PlayerContextProviderProps ) {\n\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isLooping, setIsLooping] = useState(false)\n  const [isShuffling, setIsShuffling] = useState(false)\n  \n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list: Episode[], index: number){\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n  \n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n  \n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  function clearPlayerState(){ \n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0\n  const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length\n\n\n  function playNext() {\n    if(isShuffling){\n      const newRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\n      setCurrentEpisodeIndex(newRandomEpisodeIndex)\n    }\n    else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1)\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1)\n    }\n  }\n  \n  return (\n    \n    <PlayerContext.Provider \n    value={{ \n      episodeList, \n      currentEpisodeIndex,\n      play,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      toggleShuffle,\n      toggleLoop, \n      togglePlay, \n      setPlayingState,\n      playList,\n      playNext,\n      hasNext,\n      playPrevious,\n      hasPrevious,\n      clearPlayerState \n      }}>\n\n    {children}\n    </PlayerContext.Provider> \n    )\n  }\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}